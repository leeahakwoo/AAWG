@startuml AAWGA Component Diagram

!theme plain
skinparam componentFontSize 10
skinparam componentFontName Arial

package "Frontend Components" {
    [Document Upload] as upload
    [Workflow Selection] as workflow
    [Result Display] as display
}

package "Backend Components" {
    [API Gateway] as api
    [Request Handler] as handler
    [Response Formatter] as formatter
}

package "AI Agent Components" {
    [Dynamic Workflow Engine] as engine
    [Requirement Generator] as req_gen
    [Testcase Generator] as test_gen
    [Traceability Generator] as trace_gen
}

package "Data Components" {
    [Vector Store] as vector
    [RAG Service] as rag
    [Document Processor] as processor
}

package "External Components" {
    [OpenAI API] as openai
    [FAISS Index] as faiss
}

' Frontend connections
upload --> api : HTTP POST
workflow --> api : configuration
api --> display : results

' Backend connections
api --> handler : routes
handler --> engine : executes
engine --> formatter : formats
formatter --> api : returns

' AI Agent connections
engine --> req_gen : conditional
engine --> test_gen : conditional
engine --> trace_gen : conditional

req_gen --> rag : uses
test_gen --> openai : calls
trace_gen --> openai : calls

' Data connections
rag --> vector : queries
rag --> openai : embeddings
processor --> vector : stores

' External connections
openai --> req_gen : LLM
openai --> test_gen : LLM
openai --> trace_gen : LLM
faiss --> vector : index

note right of engine
  Conditional Execution:
  - Requirements only
  - Testcases only
  - Traceability only
  - All features
end note

note right of rag
  RAG Pipeline:
  1. Document splitting
  2. Embedding generation
  3. Similarity search
  4. Context retrieval
end note

@enduml 